// Code generated by Kitex v0.3.4. DO NOT EDIT.

package usersrv

import (
	"context"
	"example.com/cloud/protogen/kitex_gen/services/account"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userSrvServiceInfo
}

var userSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserSrv"
	handlerType := (*account.UserSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserGetBe":  kitex.NewMethodInfo(userGetBeHandler, newUserGetBeArgs, newUserGetBeResult, false),
		"UserListBe": kitex.NewMethodInfo(userListBeHandler, newUserListBeArgs, newUserListBeResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.4",
		Extra:           extra,
	}
	return svcInfo
}

func userGetBeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(account.UserGetBeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(account.UserSrv).UserGetBe(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserGetBeArgs:
		success, err := handler.(account.UserSrv).UserGetBe(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserGetBeResult)
		realResult.Success = success
	}
	return nil
}
func newUserGetBeArgs() interface{} {
	return &UserGetBeArgs{}
}

func newUserGetBeResult() interface{} {
	return &UserGetBeResult{}
}

type UserGetBeArgs struct {
	Req *account.UserGetBeReq
}

func (p *UserGetBeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserGetBeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserGetBeArgs) Unmarshal(in []byte) error {
	msg := new(account.UserGetBeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserGetBeArgs_Req_DEFAULT *account.UserGetBeReq

func (p *UserGetBeArgs) GetReq() *account.UserGetBeReq {
	if !p.IsSetReq() {
		return UserGetBeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserGetBeArgs) IsSetReq() bool {
	return p.Req != nil
}

type UserGetBeResult struct {
	Success *account.UserGetBeResp
}

var UserGetBeResult_Success_DEFAULT *account.UserGetBeResp

func (p *UserGetBeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserGetBeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserGetBeResult) Unmarshal(in []byte) error {
	msg := new(account.UserGetBeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserGetBeResult) GetSuccess() *account.UserGetBeResp {
	if !p.IsSetSuccess() {
		return UserGetBeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserGetBeResult) SetSuccess(x interface{}) {
	p.Success = x.(*account.UserGetBeResp)
}

func (p *UserGetBeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func userListBeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(account.UserListBeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(account.UserSrv).UserListBe(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserListBeArgs:
		success, err := handler.(account.UserSrv).UserListBe(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserListBeResult)
		realResult.Success = success
	}
	return nil
}
func newUserListBeArgs() interface{} {
	return &UserListBeArgs{}
}

func newUserListBeResult() interface{} {
	return &UserListBeResult{}
}

type UserListBeArgs struct {
	Req *account.UserListBeReq
}

func (p *UserListBeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserListBeArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserListBeArgs) Unmarshal(in []byte) error {
	msg := new(account.UserListBeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserListBeArgs_Req_DEFAULT *account.UserListBeReq

func (p *UserListBeArgs) GetReq() *account.UserListBeReq {
	if !p.IsSetReq() {
		return UserListBeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserListBeArgs) IsSetReq() bool {
	return p.Req != nil
}

type UserListBeResult struct {
	Success *account.UserListBeResp
}

var UserListBeResult_Success_DEFAULT *account.UserListBeResp

func (p *UserListBeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserListBeResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserListBeResult) Unmarshal(in []byte) error {
	msg := new(account.UserListBeResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserListBeResult) GetSuccess() *account.UserListBeResp {
	if !p.IsSetSuccess() {
		return UserListBeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserListBeResult) SetSuccess(x interface{}) {
	p.Success = x.(*account.UserListBeResp)
}

func (p *UserListBeResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserGetBe(ctx context.Context, Req *account.UserGetBeReq) (r *account.UserGetBeResp, err error) {
	var _args UserGetBeArgs
	_args.Req = Req
	var _result UserGetBeResult
	if err = p.c.Call(ctx, "UserGetBe", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserListBe(ctx context.Context, Req *account.UserListBeReq) (r *account.UserListBeResp, err error) {
	var _args UserListBeArgs
	_args.Req = Req
	var _result UserListBeResult
	if err = p.c.Call(ctx, "UserListBe", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
