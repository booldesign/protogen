// Code generated by Kitex v0.3.4. DO NOT EDIT.

package usercentersrv

import (
	"context"
	"example.com/cloud/protogen/kitex_gen/apps/usercenter"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userCenterSrvServiceInfo
}

var userCenterSrvServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserCenterSrv"
	handlerType := (*usercenter.UserCenterSrv)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserGet":  kitex.NewMethodInfo(userGetHandler, newUserGetArgs, newUserGetResult, false),
		"UserList": kitex.NewMethodInfo(userListHandler, newUserListArgs, newUserListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.3.4",
		Extra:           extra,
	}
	return svcInfo
}

func userGetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(usercenter.UserGetReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(usercenter.UserCenterSrv).UserGet(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserGetArgs:
		success, err := handler.(usercenter.UserCenterSrv).UserGet(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserGetResult)
		realResult.Success = success
	}
	return nil
}
func newUserGetArgs() interface{} {
	return &UserGetArgs{}
}

func newUserGetResult() interface{} {
	return &UserGetResult{}
}

type UserGetArgs struct {
	Req *usercenter.UserGetReq
}

func (p *UserGetArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserGetArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserGetArgs) Unmarshal(in []byte) error {
	msg := new(usercenter.UserGetReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserGetArgs_Req_DEFAULT *usercenter.UserGetReq

func (p *UserGetArgs) GetReq() *usercenter.UserGetReq {
	if !p.IsSetReq() {
		return UserGetArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserGetArgs) IsSetReq() bool {
	return p.Req != nil
}

type UserGetResult struct {
	Success *usercenter.UserGetResp
}

var UserGetResult_Success_DEFAULT *usercenter.UserGetResp

func (p *UserGetResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserGetResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserGetResult) Unmarshal(in []byte) error {
	msg := new(usercenter.UserGetResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserGetResult) GetSuccess() *usercenter.UserGetResp {
	if !p.IsSetSuccess() {
		return UserGetResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserGetResult) SetSuccess(x interface{}) {
	p.Success = x.(*usercenter.UserGetResp)
}

func (p *UserGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func userListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(usercenter.UserListReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(usercenter.UserCenterSrv).UserList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UserListArgs:
		success, err := handler.(usercenter.UserCenterSrv).UserList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserListResult)
		realResult.Success = success
	}
	return nil
}
func newUserListArgs() interface{} {
	return &UserListArgs{}
}

func newUserListResult() interface{} {
	return &UserListResult{}
}

type UserListArgs struct {
	Req *usercenter.UserListReq
}

func (p *UserListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UserListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UserListArgs) Unmarshal(in []byte) error {
	msg := new(usercenter.UserListReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserListArgs_Req_DEFAULT *usercenter.UserListReq

func (p *UserListArgs) GetReq() *usercenter.UserListReq {
	if !p.IsSetReq() {
		return UserListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserListArgs) IsSetReq() bool {
	return p.Req != nil
}

type UserListResult struct {
	Success *usercenter.UserListResp
}

var UserListResult_Success_DEFAULT *usercenter.UserListResp

func (p *UserListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UserListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UserListResult) Unmarshal(in []byte) error {
	msg := new(usercenter.UserListResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserListResult) GetSuccess() *usercenter.UserListResp {
	if !p.IsSetSuccess() {
		return UserListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserListResult) SetSuccess(x interface{}) {
	p.Success = x.(*usercenter.UserListResp)
}

func (p *UserListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserGet(ctx context.Context, Req *usercenter.UserGetReq) (r *usercenter.UserGetResp, err error) {
	var _args UserGetArgs
	_args.Req = Req
	var _result UserGetResult
	if err = p.c.Call(ctx, "UserGet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserList(ctx context.Context, Req *usercenter.UserListReq) (r *usercenter.UserListResp, err error) {
	var _args UserListArgs
	_args.Req = Req
	var _result UserListResult
	if err = p.c.Call(ctx, "UserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
